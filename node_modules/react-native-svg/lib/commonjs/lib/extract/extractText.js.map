{"version":3,"names":["fontRegExp","fontFamilyPrefix","fontFamilySuffix","commaReg","cachedFontObjectsFromString","extractSingleFontFamily","fontFamilyString","split","replace","parseFontString","font","hasOwnProperty","match","exec","isBold","isItalic","fontSize","fontWeight","fontStyle","fontFamily","extractFont","props","fontData","fontVariant","fontStretch","textAnchor","textDecoration","letterSpacing","wordSpacing","kerning","fontFeatureSettings","fontVariantLigatures","fontVariationSettings","ownedFont","pickNotNil","baseFont","fontProps","stringifiedFontProps","Object","keys","map","k","String","TSpan","setTSpan","TSpanImplementation","getChild","child","extractText","container","x","y","dx","dy","rotate","children","inlineSize","baselineShift","verticalAlign","alignmentBaseline","textChildren","Children","count","Array","isArray","stringifiedTextProps","stringifyPropsForFabric","content","extractLengthList"],"sources":["extractText.tsx"],"sourcesContent":["import React, { Children, ComponentType } from 'react';\nimport extractLengthList from './extractLengthList';\nimport { pickNotNil } from '../util';\nimport { NumberArray, NumberProp } from './types';\nimport { stringifyPropsForFabric } from './extractProps';\n\nconst fontRegExp =\n  /^\\s*((?:(?:normal|bold|italic)\\s+)*)(?:(\\d+(?:\\.\\d+)?(?:%|px|em|pt|pc|mm|cm|in]))*(?:\\s*\\/.*?)?\\s+)?\\s*\"?([^\"]*)/i;\nconst fontFamilyPrefix = /^[\\s\"']*/;\nconst fontFamilySuffix = /[\\s\"']*$/;\nconst commaReg = /\\s*,\\s*/g;\n\nconst cachedFontObjectsFromString: {\n  [font: string]: {\n    fontStyle: string;\n    fontSize: NumberProp;\n    fontWeight: NumberProp;\n    fontFamily: string | null;\n  } | null;\n} = {};\n\nfunction extractSingleFontFamily(fontFamilyString?: string) {\n  // SVG on the web allows for multiple font-families to be specified.\n  // For compatibility, we extract the first font-family, hoping\n  // we'll get a match.\n  return fontFamilyString\n    ? fontFamilyString\n        .split(commaReg)[0]\n        .replace(fontFamilyPrefix, '')\n        .replace(fontFamilySuffix, '')\n    : null;\n}\n\nfunction parseFontString(font: string) {\n  if (cachedFontObjectsFromString.hasOwnProperty(font)) {\n    return cachedFontObjectsFromString[font];\n  }\n  const match = fontRegExp.exec(font);\n  if (!match) {\n    cachedFontObjectsFromString[font] = null;\n    return null;\n  }\n  const isBold = /bold/.exec(match[1]);\n  const isItalic = /italic/.exec(match[1]);\n  cachedFontObjectsFromString[font] = {\n    fontSize: match[2] || 12,\n    fontWeight: isBold ? 'bold' : 'normal',\n    fontStyle: isItalic ? 'italic' : 'normal',\n    fontFamily: extractSingleFontFamily(match[3]),\n  };\n  return cachedFontObjectsFromString[font];\n}\n\ninterface fontProps {\n  fontData?: unknown;\n  fontStyle?: string;\n  fontVariant?: string;\n  fontWeight?: NumberProp;\n  fontStretch?: string;\n  fontSize?: NumberProp;\n  fontFamily?: string;\n  textAnchor?: string;\n  textDecoration?: string;\n  letterSpacing?: NumberProp;\n  wordSpacing?: NumberProp;\n  kerning?: NumberProp;\n  fontFeatureSettings?: string;\n  fontVariantLigatures?: string;\n  fontVariationSettings?: string;\n  font?: string;\n}\n\nexport function extractFont(props: fontProps) {\n  const {\n    fontData,\n    fontStyle,\n    fontVariant,\n    fontWeight,\n    fontStretch,\n    fontSize,\n    fontFamily,\n    textAnchor,\n    textDecoration,\n    letterSpacing,\n    wordSpacing,\n    kerning,\n    fontFeatureSettings,\n    fontVariantLigatures,\n    fontVariationSettings,\n    font,\n  } = props;\n\n  const ownedFont = pickNotNil({\n    fontData,\n    fontStyle,\n    fontVariant,\n    fontWeight,\n    fontStretch,\n    fontSize,\n    fontFamily: extractSingleFontFamily(fontFamily),\n    textAnchor,\n    textDecoration,\n    letterSpacing,\n    wordSpacing,\n    kerning,\n    fontFeatureSettings,\n    fontVariantLigatures,\n    fontVariationSettings,\n  });\n\n  const baseFont = typeof font === 'string' ? parseFontString(font) : font;\n\n  const fontProps: { [prop: string]: string | number | null } = {\n    ...baseFont,\n    ...ownedFont,\n  };\n  const stringifiedFontProps: { [prop: string]: string | null } = {};\n  Object.keys(fontProps).map(\n    (k) =>\n      (stringifiedFontProps[k] =\n        fontProps[k] === null ? null : String(fontProps[k])),\n  );\n\n  return stringifiedFontProps;\n}\n\nlet TSpan: ComponentType<React.PropsWithChildren<{}>>;\n\nexport function setTSpan(TSpanImplementation: ComponentType) {\n  TSpan = TSpanImplementation;\n}\n\nexport type TextChild =\n  | (undefined | string | number | ComponentType | React.ReactElement)\n  | TextChild[];\n\nfunction getChild(child: TextChild) {\n  if (typeof child === 'string' || typeof child === 'number') {\n    return <TSpan>{String(child)}</TSpan>;\n  } else {\n    return child;\n  }\n}\n\nexport type TextProps = {\n  x?: NumberArray;\n  y?: NumberArray;\n  dx?: NumberArray;\n  dy?: NumberArray;\n  rotate?: NumberArray;\n  children?: TextChild;\n  inlineSize?: NumberProp;\n  baselineShift?: NumberProp;\n  verticalAlign?: NumberProp;\n  alignmentBaseline?: string;\n} & fontProps;\n\nexport default function extractText(props: TextProps, container: boolean) {\n  const {\n    x,\n    y,\n    dx,\n    dy,\n    rotate,\n    children,\n    inlineSize,\n    baselineShift,\n    verticalAlign,\n    alignmentBaseline,\n  } = props;\n\n  const textChildren =\n    typeof children === 'string' || typeof children === 'number' ? (\n      container ? (\n        <TSpan>{String(children)}</TSpan>\n      ) : null\n    ) : Children.count(children) > 1 || Array.isArray(children) ? (\n      Children.map(children, getChild)\n    ) : (\n      children\n    );\n\n  const stringifiedTextProps = stringifyPropsForFabric({\n    inlineSize,\n    baselineShift,\n    verticalAlign,\n  });\n\n  return {\n    content: textChildren === null ? String(children) : null,\n    children: textChildren,\n    ...stringifiedTextProps,\n    alignmentBaseline,\n    font: extractFont(props),\n    x: extractLengthList(x),\n    y: extractLengthList(y),\n    dx: extractLengthList(dx),\n    dy: extractLengthList(dy),\n    rotate: extractLengthList(rotate),\n  };\n}\n"],"mappings":"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"}