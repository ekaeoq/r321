{"version":3,"names":["isTag","node","getParent","parent","getChildren","children","getName","elem","tag","getText","_node","getAttributeValue","name","props","removeSubsets","nodes","idx","length","ancestor","replace","includes","splice","existsOne","predicate","elems","some","getSiblings","hasAttrib","hasOwnProperty","findOne","i","l","findAll","result","j","push","cssSelectOpts","xmlMode","adapter","flattenToSelectors","cssAst","selectors","csstree","walk","visit","enter","rule","type","prelude","atrule","each","item","pseudos","pseudoItem","list","childType","filterByMqs","filter","atPrelude","first","mq","query","generate","useMqs","filterByPseudos","usePseudos","List","fromArray","map","pseudo","data","cleanPseudos","forEach","remove","specificity","selector","A","B","C","toLowerCase","charAt","compareSpecificity","aSpecificity","bSpecificity","selectorWithSpecificity","bySelectorSpecificity","a","b","pass","arr","len","chk","dbl","r","e","li","ri","exec","buffer","Array","tmp","sortSelectors","specs","s","declarationParseProps","context","parseValue","CSSStyleDeclaration","ast","styles","style","priority","Map","declarations","parse","property","value","important","trim","set","camelCase","styleError","Error","message","console","warn","parseError","initStyle","selectedEl","closestElem","elemName","parseProps","parseCustomProperty","inlineStyles","document","styleElements","cssSelect","element","styleString","join","selectorsMq","selectorsPseudo","sortedSelectors","reverse","selectorStr","matched","camel","val","current","get","undefined","selectError","SyntaxError","SvgCss","xml","override","useMemo","SvgCssUri","uri","onError","err","useState","setXml","useEffect","fetchText","then","catch","SvgWithCss","prevProps","setState","error","state","Component","SvgWithCssUri","fetch"],"sources":["css.tsx"],"sourcesContent":["import React, { Component, useEffect, useMemo, useState } from 'react';\nimport {\n  camelCase,\n  err,\n  fetchText,\n  JsxAST,\n  Middleware,\n  parse,\n  Styles,\n  SvgAst,\n  UriProps,\n  UriState,\n  XmlAST,\n  XmlProps,\n  XmlState,\n} from './xml';\nimport csstree, {\n  Atrule,\n  AtrulePrelude,\n  CssNode,\n  Declaration,\n  DeclarationList,\n  List,\n  ListItem,\n  PseudoClassSelector,\n  Rule,\n  Selector,\n  SelectorList,\n} from 'css-tree';\nimport cssSelect, { Options } from 'css-select';\n\n/*\n * Style element inlining experiment based on SVGO\n * https://github.com/svg/svgo/blob/11f9c797411a8de966aacc4cb83dbb3e471757bc/plugins/inlineStyles.js\n * */\n\n/**\n * DOMUtils API for rnsvg AST (used by css-select)\n */\n// is the node a tag?\n// isTag: ( node:Node ) => isTag:Boolean\nfunction isTag(node: XmlAST | string): node is XmlAST {\n  return typeof node === 'object';\n}\n\n// get the parent of the node\n// getParent: ( node:Node ) => parentNode:Node\n// returns null when no parent exists\nfunction getParent(node: XmlAST | string): XmlAST {\n  return ((typeof node === 'object' && node.parent) || null) as XmlAST;\n}\n\n// get the node's children\n// getChildren: ( node:Node ) => children:[Node]\nfunction getChildren(node: XmlAST | string): Array<XmlAST | string> {\n  return (typeof node === 'object' && node.children) || [];\n}\n\n// get the name of the tag'\n// getName: ( elem:ElementNode ) => tagName:String\nfunction getName(elem: XmlAST): string {\n  return elem.tag;\n}\n\n// get the text content of the node, and its children if it has any\n// getText: ( node:Node ) => text:String\n// returns empty string when there is no text\nfunction getText(_node: XmlAST | string): string {\n  return '';\n}\n\n// get the attribute value\n// getAttributeValue: ( elem:ElementNode, name:String ) => value:String\n// returns null when attribute doesn't exist\nfunction getAttributeValue(elem: XmlAST, name: string): string {\n  return (elem.props[name] || null) as string;\n}\n\n// takes an array of nodes, and removes any duplicates, as well as any nodes\n// whose ancestors are also in the array\nfunction removeSubsets(nodes: Array<XmlAST | string>): Array<XmlAST | string> {\n  let idx = nodes.length,\n    node,\n    ancestor,\n    replace;\n\n  // Check if each node (or one of its ancestors) is already contained in the\n  // array.\n  while (--idx > -1) {\n    node = ancestor = nodes[idx];\n\n    // Temporarily remove the node under consideration\n    delete nodes[idx];\n    replace = true;\n\n    while (ancestor) {\n      if (nodes.includes(ancestor)) {\n        replace = false;\n        nodes.splice(idx, 1);\n        break;\n      }\n      ancestor = (typeof ancestor === 'object' && ancestor.parent) || null;\n    }\n\n    // If the node has been found to be unique, re-insert it.\n    if (replace) {\n      nodes[idx] = node;\n    }\n  }\n\n  return nodes;\n}\n\n// does at least one of passed element nodes pass the test predicate?\nfunction existsOne(\n  predicate: (v: XmlAST) => boolean,\n  elems: Array<XmlAST | string>,\n): boolean {\n  return elems.some(\n    (elem) =>\n      typeof elem === 'object' &&\n      (predicate(elem) || existsOne(predicate, elem.children)),\n  );\n}\n\n/*\n  get the siblings of the node. Note that unlike jQuery's `siblings` method,\n  this is expected to include the current node as well\n*/\nfunction getSiblings(node: XmlAST | string): Array<XmlAST | string> {\n  const parent = typeof node === 'object' && node.parent;\n  return (parent && parent.children) || [];\n}\n\n// does the element have the named attribute?\nfunction hasAttrib(elem: XmlAST, name: string): boolean {\n  return elem.props.hasOwnProperty(name);\n}\n\n// finds the first node in the array that matches the test predicate, or one\n// of its children\nfunction findOne(\n  predicate: (v: XmlAST) => boolean,\n  elems: Array<XmlAST | string>,\n): XmlAST | null {\n  let elem: XmlAST | null = null;\n\n  for (let i = 0, l = elems.length; i < l && !elem; i++) {\n    const node = elems[i];\n    if (typeof node === 'string') {\n    } else if (predicate(node)) {\n      elem = node;\n    } else {\n      const { children } = node;\n      if (children.length !== 0) {\n        elem = findOne(predicate, children);\n      }\n    }\n  }\n\n  return elem;\n}\n\n// finds all of the element nodes in the array that match the test predicate,\n// as well as any of their children that match it\nfunction findAll(\n  predicate: (v: XmlAST) => boolean,\n  nodes: Array<XmlAST | string>,\n  result: Array<XmlAST> = [],\n): Array<XmlAST> {\n  for (let i = 0, j = nodes.length; i < j; i++) {\n    const node = nodes[i];\n    if (typeof node !== 'object') {\n      continue;\n    }\n    if (predicate(node)) {\n      result.push(node);\n    }\n    const { children } = node;\n    if (children.length !== 0) {\n      findAll(predicate, children, result);\n    }\n  }\n\n  return result;\n}\n\nconst cssSelectOpts: Options<XmlAST | string, XmlAST> = {\n  xmlMode: true,\n  adapter: {\n    removeSubsets,\n    existsOne,\n    getSiblings,\n    hasAttrib,\n    findOne,\n    findAll,\n    isTag,\n    getParent,\n    getChildren,\n    getName,\n    getText,\n    getAttributeValue,\n  },\n};\n\ntype FlatPseudoSelector = {\n  item: ListItem<CssNode>;\n  list: List<CssNode>;\n};\ntype FlatPseudoSelectorList = FlatPseudoSelector[];\ntype FlatSelector = {\n  item: ListItem<CssNode>;\n  atrule: Atrule | null;\n  rule: CssNode;\n  pseudos: FlatPseudoSelectorList;\n};\ntype FlatSelectorList = FlatSelector[];\n\n/**\n * Flatten a CSS AST to a selectors list.\n *\n * @param {Object} cssAst css-tree AST to flatten\n * @param {Array} selectors\n */\nfunction flattenToSelectors(cssAst: CssNode, selectors: FlatSelectorList) {\n  csstree.walk(cssAst, {\n    visit: 'Rule',\n    enter(rule: CssNode) {\n      const { type, prelude } = rule as Rule;\n      if (type !== 'Rule') {\n        return;\n      }\n      const atrule = this.atrule;\n      (prelude as SelectorList).children.each((node, item) => {\n        const { children } = node as Selector;\n        const pseudos: FlatPseudoSelectorList = [];\n        selectors.push({\n          item,\n          atrule,\n          rule,\n          pseudos,\n        });\n        children.each(({ type: childType }, pseudoItem, list) => {\n          if (\n            childType === 'PseudoClassSelector' ||\n            childType === 'PseudoElementSelector'\n          ) {\n            pseudos.push({\n              item: pseudoItem,\n              list,\n            });\n          }\n        });\n      });\n    },\n  });\n}\n\n/**\n * Filter selectors by Media Query.\n *\n * @param {Array} selectors to filter\n * @return {Array} Filtered selectors that match the passed media queries\n */\nfunction filterByMqs(selectors: FlatSelectorList) {\n  return selectors.filter(({ atrule }) => {\n    if (atrule === null) {\n      return true;\n    }\n    const { name, prelude } = atrule;\n    const atPrelude = prelude as AtrulePrelude;\n    const first = atPrelude && atPrelude.children.first();\n    const mq = first && first.type === 'MediaQueryList';\n    const query = mq ? csstree.generate(atPrelude) : name;\n    return useMqs.includes(query);\n  });\n}\n// useMqs Array with strings of media queries that should pass (<name> <expression>)\nconst useMqs = ['', 'screen'];\n\n/**\n * Filter selectors by the pseudo-elements and/or -classes they contain.\n *\n * @param {Array} selectors to filter\n * @return {Array} Filtered selectors that match the passed pseudo-elements and/or -classes\n */\nfunction filterByPseudos(selectors: FlatSelectorList) {\n  return selectors.filter(({ pseudos }) =>\n    usePseudos.includes(\n      csstree.generate({\n        type: 'Selector',\n        children: new List<CssNode>().fromArray(\n          pseudos.map((pseudo) => pseudo.item.data),\n        ),\n      }),\n    ),\n  );\n}\n// usePseudos Array with strings of single or sequence of pseudo-elements and/or -classes that should pass\nconst usePseudos = [''];\n\n/**\n * Remove pseudo-elements and/or -classes from the selectors for proper matching.\n *\n * @param {Array} selectors to clean\n * @return {Array} Selectors without pseudo-elements and/or -classes\n */\nfunction cleanPseudos(selectors: FlatSelectorList) {\n  selectors.forEach(({ pseudos }) =>\n    pseudos.forEach((pseudo) => pseudo.list.remove(pseudo.item)),\n  );\n}\n\ntype Specificity = [number, number, number];\nfunction specificity(selector: Selector): Specificity {\n  let A = 0;\n  let B = 0;\n  let C = 0;\n\n  selector.children.each(function walk(node: CssNode) {\n    switch (node.type) {\n      case 'SelectorList':\n      case 'Selector':\n        node.children.each(walk);\n        break;\n\n      case 'IdSelector':\n        A++;\n        break;\n\n      case 'ClassSelector':\n      case 'AttributeSelector':\n        B++;\n        break;\n\n      case 'PseudoClassSelector':\n        switch (node.name.toLowerCase()) {\n          case 'not':\n            const children = (node as PseudoClassSelector).children;\n            children && children.each(walk);\n            break;\n\n          case 'before':\n          case 'after':\n          case 'first-line':\n          case 'first-letter':\n            C++;\n            break;\n\n          // TODO: support for :nth-*(.. of <SelectorList>), :matches(), :has()\n\n          default:\n            B++;\n        }\n        break;\n\n      case 'PseudoElementSelector':\n        C++;\n        break;\n\n      case 'TypeSelector':\n        // ignore universal selector\n        const { name } = node;\n        if (name.charAt(name.length - 1) !== '*') {\n          C++;\n        }\n        break;\n    }\n  });\n\n  return [A, B, C];\n}\n\n/**\n * Compares two selector specificities.\n * extracted from https://github.com/keeganstreet/specificity/blob/master/specificity.js#L211\n *\n * @param {Array} aSpecificity Specificity of selector A\n * @param {Array} bSpecificity Specificity of selector B\n * @return {Number} Score of selector specificity A compared to selector specificity B\n */\nfunction compareSpecificity(\n  aSpecificity: Specificity,\n  bSpecificity: Specificity,\n): number {\n  for (let i = 0; i < 4; i += 1) {\n    if (aSpecificity[i] < bSpecificity[i]) {\n      return -1;\n    } else if (aSpecificity[i] > bSpecificity[i]) {\n      return 1;\n    }\n  }\n  return 0;\n}\n\ntype Spec = {\n  selector: FlatSelector;\n  specificity: Specificity;\n};\nfunction selectorWithSpecificity(selector: FlatSelector): Spec {\n  return {\n    selector,\n    specificity: specificity(selector.item.data as Selector),\n  };\n}\n\n/**\n * Compare two simple selectors.\n *\n * @param {Object} a Simple selector A\n * @param {Object} b Simple selector B\n * @return {Number} Score of selector A compared to selector B\n */\nfunction bySelectorSpecificity(a: Spec, b: Spec): number {\n  return compareSpecificity(a.specificity, b.specificity);\n}\n\n// Run a single pass with the given chunk size.\nfunction pass(arr: Spec[], len: number, chk: number, result: Spec[]) {\n  // Step size / double chunk size.\n  const dbl = chk * 2;\n  // Bounds of the left and right chunks.\n  let l, r, e;\n  // Iterators over the left and right chunk.\n  let li, ri;\n\n  // Iterate over pairs of chunks.\n  let i = 0;\n  for (l = 0; l < len; l += dbl) {\n    r = l + chk;\n    e = r + chk;\n    if (r > len) {\n      r = len;\n    }\n    if (e > len) {\n      e = len;\n    }\n\n    // Iterate both chunks in parallel.\n    li = l;\n    ri = r;\n    while (true) {\n      // Compare the chunks.\n      if (li < r && ri < e) {\n        // This works for a regular `sort()` compatible comparator,\n        // but also for a simple comparator like: `a > b`\n        if (bySelectorSpecificity(arr[li], arr[ri]) <= 0) {\n          result[i++] = arr[li++];\n        } else {\n          result[i++] = arr[ri++];\n        }\n      }\n      // Nothing to compare, just flush what's left.\n      else if (li < r) {\n        result[i++] = arr[li++];\n      } else if (ri < e) {\n        result[i++] = arr[ri++];\n      }\n      // Both iterators are at the chunk ends.\n      else {\n        break;\n      }\n    }\n  }\n}\n\n// Execute the sort using the input array and a second buffer as work space.\n// Returns one of those two, containing the final result.\nfunction exec(arr: Spec[], len: number): Spec[] {\n  // Rather than dividing input, simply iterate chunks of 1, 2, 4, 8, etc.\n  // Chunks are the size of the left or right hand in merge sort.\n  // Stop when the left-hand covers all of the array.\n  let buffer = new Array(len);\n  for (let chk = 1; chk < len; chk *= 2) {\n    pass(arr, len, chk, buffer);\n    const tmp = arr;\n    arr = buffer;\n    buffer = tmp;\n  }\n  return arr;\n}\n\n/**\n * Sort selectors stably by their specificity.\n *\n * @param {Array} selectors to be sorted\n * @return {Array} Stable sorted selectors\n */\nfunction sortSelectors(selectors: FlatSelectorList) {\n  // Short-circuit when there's nothing to sort.\n  const len = selectors.length;\n  if (len <= 1) {\n    return selectors;\n  }\n  const specs = selectors.map(selectorWithSpecificity);\n  return exec(specs, len).map((s) => s.selector);\n}\n\nconst declarationParseProps = {\n  context: 'declarationList',\n  parseValue: false,\n};\nfunction CSSStyleDeclaration(ast: XmlAST) {\n  const { props, styles } = ast;\n  if (!props.style) {\n    props.style = {};\n  }\n  const style = props.style as Styles;\n  const priority = new Map();\n  ast.style = style;\n  ast.priority = priority;\n  if (!styles || styles.length === 0) {\n    return;\n  }\n  try {\n    const declarations = csstree.parse(\n      styles,\n      declarationParseProps,\n    ) as DeclarationList;\n    declarations.children.each((node) => {\n      try {\n        const { property, value, important } = node as Declaration;\n        const name = property.trim();\n        priority.set(name, important);\n        style[camelCase(name)] = csstree.generate(value).trim();\n      } catch (styleError) {\n        if (\n          styleError instanceof Error &&\n          styleError.message !== 'Unknown node type: undefined'\n        ) {\n          console.warn(\n            \"Warning: Parse error when parsing inline styles, style properties of this element cannot be used. The raw styles can still be get/set using .attr('style').value. Error details: \" +\n              styleError,\n          );\n        }\n      }\n    });\n  } catch (parseError) {\n    console.warn(\n      \"Warning: Parse error when parsing inline styles, style properties of this element cannot be used. The raw styles can still be get/set using .attr('style').value. Error details: \" +\n        parseError,\n    );\n  }\n}\n\ninterface StyledAST extends XmlAST {\n  style: Styles;\n  priority: Map<string, boolean | undefined>;\n}\nfunction initStyle(selectedEl: XmlAST): StyledAST {\n  if (!selectedEl.style) {\n    CSSStyleDeclaration(selectedEl);\n  }\n  return selectedEl as StyledAST;\n}\n\n/**\n * Find the closest ancestor of the current element.\n * @param node\n * @param elemName\n * @return {?Object}\n */\nfunction closestElem(node: XmlAST, elemName: string) {\n  let elem: XmlAST | null = node;\n  while ((elem = elem.parent) && elem.tag !== elemName) {}\n  return elem;\n}\n\nconst parseProps = {\n  parseValue: false,\n  parseCustomProperty: false,\n};\n\n/**\n * Moves + merges styles from style elements to element styles\n *\n * Options\n *   useMqs (default: ['', 'screen'])\n *     what media queries to be used\n *     empty string element for styles outside media queries\n *\n *   usePseudos (default: [''])\n *     what pseudo-classes/-elements to be used\n *     empty string element for all non-pseudo-classes and/or -elements\n *\n * @param {Object} document document element\n *\n * @author strarsis <strarsis@gmail.com>\n * @author modified by: msand <msand@abo.fi>\n */\nexport const inlineStyles: Middleware = function inlineStyles(\n  document: XmlAST,\n) {\n  // collect <style/>s\n  const styleElements = cssSelect('style', document, cssSelectOpts);\n\n  //no <styles/>s, nothing to do\n  if (styleElements.length === 0) {\n    return document;\n  }\n\n  const selectors: FlatSelectorList = [];\n\n  for (let element of styleElements) {\n    const { children } = element;\n    if (!children.length || closestElem(element, 'foreignObject')) {\n      // skip empty <style/>s or <foreignObject> content.\n      continue;\n    }\n\n    // collect <style/>s and their css ast\n    try {\n      const styleString = children.join('');\n      flattenToSelectors(csstree.parse(styleString, parseProps), selectors);\n    } catch (parseError) {\n      console.warn(\n        'Warning: Parse error of styles of <style/> element, skipped. Error details: ' +\n          parseError,\n      );\n    }\n  }\n\n  // filter for mediaqueries to be used or without any mediaquery\n  const selectorsMq = filterByMqs(selectors);\n\n  // filter for pseudo elements to be used\n  const selectorsPseudo = filterByPseudos(selectorsMq);\n\n  // remove PseudoClass from its SimpleSelector for proper matching\n  cleanPseudos(selectorsPseudo);\n\n  // stable sort selectors\n  const sortedSelectors = sortSelectors(selectorsPseudo).reverse();\n\n  // match selectors\n  for (let { rule, item } of sortedSelectors) {\n    if (rule === null) {\n      continue;\n    }\n    const selectorStr = csstree.generate(item.data);\n    try {\n      // apply <style/> to matched elements\n      const matched = cssSelect(selectorStr, document, cssSelectOpts).map(\n        initStyle,\n      );\n\n      if (matched.length === 0) {\n        continue;\n      }\n      csstree.walk(rule, {\n        visit: 'Declaration',\n        enter(node: CssNode) {\n          const { property, value, important } = node as Declaration;\n          // existing inline styles have higher priority\n          // no inline styles, external styles,                                    external styles used\n          // inline styles,    external styles same   priority as inline styles,   inline   styles used\n          // inline styles,    external styles higher priority than inline styles, external styles used\n          const name = property.trim();\n          const camel = camelCase(name);\n          const val = csstree.generate(value).trim();\n          for (let element of matched) {\n            const { style, priority } = element;\n            const current = priority.get(name);\n            if (current === undefined || current < important) {\n              priority.set(name, important as boolean);\n              style[camel] = val;\n            }\n          }\n        },\n      });\n    } catch (selectError) {\n      if (selectError instanceof SyntaxError) {\n        console.warn(\n          'Warning: Syntax error when trying to select \\n\\n' +\n            selectorStr +\n            '\\n\\n, skipped. Error details: ' +\n            selectError,\n        );\n        continue;\n      }\n      throw selectError;\n    }\n  }\n\n  return document;\n};\n\nexport function SvgCss(props: XmlProps) {\n  const { xml, override } = props;\n  const ast = useMemo<JsxAST | null>(\n    () => (xml !== null ? parse(xml, inlineStyles) : null),\n    [xml],\n  );\n  return <SvgAst ast={ast} override={override || props} />;\n}\n\nexport function SvgCssUri(props: UriProps) {\n  const { uri, onError = err } = props;\n  const [xml, setXml] = useState<string | null>(null);\n  useEffect(() => {\n    uri ? fetchText(uri).then(setXml).catch(onError) : setXml(null);\n  }, [onError, uri]);\n  return <SvgCss xml={xml} override={props} />;\n}\n\n// Extending Component is required for Animated support.\n\nexport class SvgWithCss extends Component<XmlProps, XmlState> {\n  state = { ast: null };\n  componentDidMount() {\n    this.parse(this.props.xml);\n  }\n  componentDidUpdate(prevProps: { xml: string | null }) {\n    const { xml } = this.props;\n    if (xml !== prevProps.xml) {\n      this.parse(xml);\n    }\n  }\n  parse(xml: string | null) {\n    try {\n      this.setState({ ast: xml ? parse(xml, inlineStyles) : null });\n    } catch (e) {\n      this.props.onError ? this.props.onError(e as Error) : console.error(e);\n    }\n  }\n  render() {\n    const {\n      props,\n      state: { ast },\n    } = this;\n    return <SvgAst ast={ast} override={props.override || props} />;\n  }\n}\n\nexport class SvgWithCssUri extends Component<UriProps, UriState> {\n  state = { xml: null };\n  componentDidMount() {\n    this.fetch(this.props.uri);\n  }\n  componentDidUpdate(prevProps: { uri: string | null }) {\n    const { uri } = this.props;\n    if (uri !== prevProps.uri) {\n      this.fetch(uri);\n    }\n  }\n  async fetch(uri: string | null) {\n    try {\n      this.setState({ xml: uri ? await fetchText(uri) : null });\n    } catch (e) {\n      this.props.onError ? this.props.onError(e as Error) : console.error(e);\n    }\n  }\n  render() {\n    const {\n      props,\n      state: { xml },\n    } = this;\n    return <SvgWithCss xml={xml} override={props} />;\n  }\n}\n"],"mappings":"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"}