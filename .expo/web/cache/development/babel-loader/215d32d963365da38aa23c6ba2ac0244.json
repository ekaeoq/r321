{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { spotifyCredentials } from \"./secrets\";\nimport SpotifyWebAPI from 'spotify-web-api-js';\nimport * as WebBrowser from 'expo-web-browser';\nimport { makeRedirectUri, useAuthRequest } from 'expo-auth-session';\nimport { encode as btoa } from 'base-64';\nimport { styles } from \"./styleApp.js\";\nimport AnimatedTyping from \"./AnimatedTyping.js\";\nimport axios from 'axios';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar scopesArr = ['user-modify-playback-state'];\nvar scopes = scopesArr.join(' ');\nvar discovery = {\n  authorizationEndpoint: 'https://accounts.spotify.com/authorize',\n  tokenEndpoint: 'https://accounts.spotify.com/api/token'\n};\nWebBrowser.maybeCompleteAuthSession();\n\nexport default function App() {\n  var _useAuthRequest = useAuthRequest({\n      clientId: spotifyCredentials.clientId,\n      scopes: ['user-modify-playback-state', 'user-read-currently-playing', 'user-read-playback-state', 'user-library-modify', 'user-library-read', 'playlist-read-private', 'playlist-read-collaborative', 'playlist-modify-public', 'playlist-modify-private', 'user-read-recently-played', 'user-top-read'],\n      usePKCE: false,\n      redirectUri: makeRedirectUri({\n        scheme: 'app'\n      })\n    }, discovery),\n    _useAuthRequest2 = _slicedToArray(_useAuthRequest, 3),\n    request = _useAuthRequest2[0],\n    response = _useAuthRequest2[1],\n    promptAsync = _useAuthRequest2[2];\n  React.useEffect(function () {\n    if ((response == null ? void 0 : response.type) === 'success') {\n      var code = response.params.code;\n      console.log(\"sejkfwerk\");\n    }\n  }, [response]);\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsx(AnimatedTyping, {\n      text: [\"Hello there fellow music enthusiast!\", \"\", \"Are you prepared to hand over your deepest darkest listening pleasures to a mere AI machine?\", \"Don't worry, we won't tell anyone if you won't ;)\"]\n    }), _jsx(Button, {\n      title: \"Log in!\",\n      color: \"#00734237\",\n      onPress: function onPress() {\n        promptAsync();\n      }\n    }), _jsx(StatusBar, {\n      style: \"auto\"\n    })]\n  });\n}\nexport var getUserPlaylists = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var sp = yield getValidSPObj();\n    var _yield$sp$getMe = yield sp.getMe(),\n      userId = _yield$sp$getMe.id;\n    console.log(userId);\n    var _yield$sp$getUserPlay = yield sp.getUserPlaylists(userId, {\n        limit: 50\n      }),\n      playlists = _yield$sp$getUserPlay.items;\n    return playlists;\n  });\n  return function getUserPlaylists() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar getAuthorizationCode = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    try {\n      var redirectUrl = AuthSession.makeRedirectUri();\n      var url = 'https://accounts.spotify.com/authorize' + '?response_type=code' + '&client_id=' + spotifyCredentials.clientId + (scopes ? '&scope=' + encodeURIComponent(scopes) : '') + '&redirect_uri=' + encodeURIComponent(redirectUrl);\n      console.log(url);\n      WebBrowser.maybeCompleteAuthSession();\n      var _result = yield AuthSession.startAsync({\n        authUrl: url\n      });\n    } catch (err) {\n      console.error(err);\n    }\n    return result.params.code;\n  });\n  return function getAuthorizationCode() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getValidSPObj = function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    var tokenExpirationTime = yield getUserData('expirationTime');\n    if (new Date().getTime() > tokenExpirationTime) {\n      yield refreshTokens();\n    }\n    var accessToken = yield getUserData('accessToken');\n    var sp = new SpotifyWebAPI();\n    yield sp.setAccessToken(accessToken);\n    return sp;\n  });\n  return function getValidSPObj() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar getTokens = function () {\n  var _ref4 = _asyncToGenerator(function* () {\n    try {\n      var authorizationCode = yield getAuthorizationCode();\n      var credsB64 = btoa(spotifyCredentials.clientId + \":\" + spotifyCredentials.clientSecret);\n      var response = yield fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n          Authorization: \"Basic \" + credsB64,\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: \"grant_type=authorization_code&code=\" + authorizationCode + \"&redirect_uri=\" + spotifyCredentials.redirectUri\n      });\n      var responseJson = yield response.json();\n      var accessToken = responseJson.access_token,\n        refreshToken = responseJson.refresh_token,\n        expiresIn = responseJson.expires_in;\n      var _expirationTime = new Date().getTime() + expiresIn * 1000;\n      yield setUserData('accessToken', accessToken);\n      yield setUserData('refreshToken', refreshToken);\n      yield setUserData('expirationTime', _expirationTime);\n    } catch (err) {\n      console.error(err);\n    }\n  });\n  return function getTokens() {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nexport var refreshTokens = function () {\n  var _ref5 = _asyncToGenerator(function* () {\n    try {\n      var credsB64 = btoa(spotifyCredentials.clientId + \":\" + spotifyCredentials.clientSecret);\n      var refreshToken = yield getUserData('refreshToken');\n      var response = yield fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n          Authorization: \"Basic \" + credsB64,\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: \"grant_type=refresh_token&refresh_token=\" + refreshToken\n      });\n      var responseJson = yield response.json();\n      if (responseJson.error) {\n        yield getTokens();\n      } else {\n        var newAccessToken = responseJson.access_token,\n          newRefreshToken = responseJson.refresh_token,\n          expiresIn = responseJson.expires_in;\n        var _expirationTime2 = new Date().getTime() + expiresIn * 1000;\n        yield setUserData('accessToken', newAccessToken);\n        if (newRefreshToken) {\n          yield setUserData('refreshToken', newRefreshToken);\n        }\n      }\n      yield setUserData('expirationTime', expirationTime);\n    } catch (err) {\n      console.error(err);\n    }\n  });\n  return function refreshTokens() {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["StatusBar","React","NavigationContainer","spotifyCredentials","SpotifyWebAPI","WebBrowser","makeRedirectUri","useAuthRequest","encode","btoa","styles","AnimatedTyping","axios","scopesArr","scopes","join","discovery","authorizationEndpoint","tokenEndpoint","maybeCompleteAuthSession","App","clientId","usePKCE","redirectUri","scheme","request","response","promptAsync","useEffect","type","code","params","console","log","container","getUserPlaylists","sp","getValidSPObj","getMe","userId","id","limit","playlists","items","getAuthorizationCode","redirectUrl","AuthSession","url","encodeURIComponent","result","startAsync","authUrl","err","error","tokenExpirationTime","getUserData","Date","getTime","refreshTokens","accessToken","setAccessToken","getTokens","authorizationCode","credsB64","clientSecret","fetch","method","headers","Authorization","body","responseJson","json","access_token","refreshToken","refresh_token","expiresIn","expires_in","expirationTime","setUserData","newAccessToken","newRefreshToken"],"sources":["D:/DOKUMENTI/Faks/r321/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport * as React from 'react';\r\nimport { StyleSheet, Text, View, SafeAreaView, Button,Alert, Image } from 'react-native';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { spotifyCredentials } from './secrets';\r\nimport SpotifyWebAPI from 'spotify-web-api-js';\r\nimport * as WebBrowser from 'expo-web-browser';\r\n//import * as AuthSession from 'expo-auth-session';\r\nimport { makeRedirectUri, useAuthRequest } from 'expo-auth-session';\r\nimport { encode as btoa } from 'base-64';\r\nimport { styles } from './styleApp.js';\r\nimport AnimatedTyping from './AnimatedTyping.js';\r\nimport axios from 'axios';\r\n//the scope for our analytics\r\nconst scopesArr = ['user-modify-playback-state'];\r\nconst scopes = scopesArr.join(' ');\r\n\r\nconst discovery = {\r\n  authorizationEndpoint: 'https://accounts.spotify.com/authorize',\r\n  tokenEndpoint: 'https://accounts.spotify.com/api/token',\r\n};\r\n\r\nWebBrowser.maybeCompleteAuthSession();\r\n\r\n// const getDisplayName = async (e) => {\r\n//   e.preventDefault()\r\n//   const {data} = await axios.get(\"https://api.spotify.com/v1/me\", {\r\n//       headers: {\r\n//           Authorization: `Bearer ${token}`\r\n//       },\r\n//       params: {\r\n//           q: searchKey,\r\n//           type: \"artist\"\r\n//       }\r\n//   })\r\n\r\n//   setArtists(data.artists.items)\r\n// }\r\n\r\nexport default function App() {\r\n  const [request, response, promptAsync] = useAuthRequest(\r\n    {\r\n      clientId: spotifyCredentials.clientId,\r\n      scopes: ['user-modify-playback-state','user-read-currently-playing','user-read-playback-state','user-library-modify',\r\n      'user-library-read','playlist-read-private','playlist-read-collaborative','playlist-modify-public',\r\n      'playlist-modify-private','user-read-recently-played','user-top-read'],\r\n      // In order to follow the \"Authorization Code Flow\" to fetch token after authorizationEndpoint\r\n      // this must be set to false\r\n      usePKCE: false,\r\n      redirectUri: makeRedirectUri({\r\n        scheme: 'app'\r\n      }),\r\n    },\r\n    discovery\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (response?.type === 'success') {\r\n      const { code } = response.params;\r\n      console.log(\"sejkfwerk\");\r\n    }\r\n  }, [response]);\r\n  return (\r\n    \r\n    <SafeAreaView style={styles.container}>\r\n      <AnimatedTyping text={[\"Hello there fellow music enthusiast!\",\"\", \"Are you prepared to hand over your deepest darkest listening pleasures to a mere AI machine?\", \"Don't worry, we won't tell anyone if you won't ;)\"]} />\r\n      \r\n      <Button \r\n        title=\"Log in!\"\r\n        color={\"#00734237\"}\r\n        onPress={() => {\r\n          promptAsync();\r\n          \r\n        }}>\r\n      </Button>\r\n      {/* <Button \r\n        title=\"name\"\r\n        color={\"#00734237\"}\r\n        onPress={() => {getUserPlaylists() ;        \r\n        }}>\r\n      </Button> */}\r\n\r\n      <StatusBar style=\"auto\" /> \r\n    </SafeAreaView>\r\n  );\r\n  \r\n}\r\n\r\nexport const getUserPlaylists = async () => {\r\n  const sp = await getValidSPObj();\r\n  const { id: userId } = await sp.getMe();\r\n  console.log(userId);\r\n  const { items: playlists } = await sp.getUserPlaylists(userId, { limit: 50 });\r\n  return playlists;\r\n};\r\n//step 1\r\nconst getAuthorizationCode = async () => {\r\ntry { \r\n    const redirectUrl = AuthSession.makeRedirectUri();\r\n    let url=\r\n    'https://accounts.spotify.com/authorize' +\r\n    '?response_type=code' +\r\n    '&client_id=' +\r\n    spotifyCredentials.clientId +\r\n    (scopes ? '&scope=' + encodeURIComponent(scopes) : '') +\r\n    '&redirect_uri=' +\r\n    encodeURIComponent(redirectUrl);\r\n    console.log(url);\r\n    WebBrowser.maybeCompleteAuthSession();\r\n    const result = await AuthSession.startAsync({  authUrl:url  })\r\n    \r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return result.params.code\r\n}\r\n\r\n\r\nexport const getValidSPObj = async () => {\r\n  const tokenExpirationTime = await getUserData('expirationTime');\r\n  if (new Date().getTime() > tokenExpirationTime) {\r\n    // access token has expired, so we need to use the refresh token\r\n    await refreshTokens();\r\n  }\r\n  const accessToken = await getUserData('accessToken');\r\n  var sp = new SpotifyWebAPI();\r\n  await sp.setAccessToken(accessToken);\r\n  return sp;\r\n}\r\n\r\n//step 2: create access token and refresh token\r\nconst getTokens = async () => {\r\n  try {\r\n    const authorizationCode = await getAuthorizationCode() //we wrote this function above\r\n    const credsB64 = btoa(`${spotifyCredentials.clientId}:${spotifyCredentials.clientSecret}`);\r\n    const response = await fetch('https://accounts.spotify.com/api/token', {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Basic ${credsB64}`,\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      body: `grant_type=authorization_code&code=${authorizationCode}&redirect_uri=${\r\n        spotifyCredentials.redirectUri\r\n      }`,\r\n    });\r\n    const responseJson = await response.json();\r\n    \r\n    const {\r\n      access_token: accessToken,\r\n      refresh_token: refreshToken,\r\n      expires_in: expiresIn,\r\n    } = responseJson;\r\n\r\n    const expirationTime = new Date().getTime() + expiresIn * 1000;\r\n    await setUserData('accessToken', accessToken);\r\n    await setUserData('refreshToken', refreshToken);\r\n    await setUserData('expirationTime', expirationTime);\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}\r\n\r\n//step 3: refresh the token (since the tokens from step 2 have a lifespan)\r\n\r\nexport const refreshTokens = async () => {\r\n  try { \r\n    const credsB64 = btoa(`${spotifyCredentials.clientId}:${spotifyCredentials.clientSecret}`);\r\n    const refreshToken = await getUserData('refreshToken');\r\n    const response = await fetch('https://accounts.spotify.com/api/token', {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Basic ${credsB64}`,\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      body: `grant_type=refresh_token&refresh_token=${refreshToken}`,\r\n    });\r\n    const responseJson = await response.json();\r\n    if (responseJson.error) {\r\n      await getTokens();\r\n    } else {\r\n      const {\r\n        access_token: newAccessToken,\r\n        refresh_token: newRefreshToken,\r\n        expires_in: expiresIn,\r\n      } = responseJson;\r\n\r\n      const expirationTime = new Date().getTime() + expiresIn * 1000;\r\n      await setUserData('accessToken', newAccessToken);\r\n      if (newRefreshToken) {\r\n        await setUserData('refreshToken', newRefreshToken);\r\n      }\r\n   \r\n       }   await setUserData('expirationTime', expirationTime);\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n}\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE/B,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,kBAAkB;AAC3B,OAAOC,aAAa,MAAM,oBAAoB;AAC9C,OAAO,KAAKC,UAAU,MAAM,kBAAkB;AAE9C,SAASC,eAAe,EAAEC,cAAc,QAAQ,mBAAmB;AACnE,SAASC,MAAM,IAAIC,IAAI,QAAQ,SAAS;AACxC,SAASC,MAAM;AACf,OAAOC,cAAc;AACrB,OAAOC,KAAK,MAAM,OAAO;AAAC;AAAA;AAE1B,IAAMC,SAAS,GAAG,CAAC,4BAA4B,CAAC;AAChD,IAAMC,MAAM,GAAGD,SAAS,CAACE,IAAI,CAAC,GAAG,CAAC;AAElC,IAAMC,SAAS,GAAG;EAChBC,qBAAqB,EAAE,wCAAwC;EAC/DC,aAAa,EAAE;AACjB,CAAC;AAEDb,UAAU,CAACc,wBAAwB,EAAE;;AAiBrC,eAAe,SAASC,GAAG,GAAG;EAC5B,sBAAyCb,cAAc,CACrD;MACEc,QAAQ,EAAElB,kBAAkB,CAACkB,QAAQ;MACrCP,MAAM,EAAE,CAAC,4BAA4B,EAAC,6BAA6B,EAAC,0BAA0B,EAAC,qBAAqB,EACpH,mBAAmB,EAAC,uBAAuB,EAAC,6BAA6B,EAAC,wBAAwB,EAClG,yBAAyB,EAAC,2BAA2B,EAAC,eAAe,CAAC;MAGtEQ,OAAO,EAAE,KAAK;MACdC,WAAW,EAAEjB,eAAe,CAAC;QAC3BkB,MAAM,EAAE;MACV,CAAC;IACH,CAAC,EACDR,SAAS,CACV;IAAA;IAdMS,OAAO;IAAEC,QAAQ;IAAEC,WAAW;EAgBrC1B,KAAK,CAAC2B,SAAS,CAAC,YAAM;IACpB,IAAI,CAAAF,QAAQ,oBAARA,QAAQ,CAAEG,IAAI,MAAK,SAAS,EAAE;MAChC,IAAQC,IAAI,GAAKJ,QAAQ,CAACK,MAAM,CAAxBD,IAAI;MACZE,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IAC1B;EACF,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;EACd,OAEE,MAAC,YAAY;IAAC,KAAK,EAAEhB,MAAM,CAACwB,SAAU;IAAA,WACpC,KAAC,cAAc;MAAC,IAAI,EAAE,CAAC,sCAAsC,EAAC,EAAE,EAAE,8FAA8F,EAAE,mDAAmD;IAAE,EAAG,EAE1N,KAAC,MAAM;MACL,KAAK,EAAC,SAAS;MACf,KAAK,EAAE,WAAY;MACnB,OAAO,EAAE,mBAAM;QACbP,WAAW,EAAE;MAEf;IAAE,EACK,EAQT,KAAC,SAAS;MAAC,KAAK,EAAC;IAAM,EAAG;EAAA,EACb;AAGnB;AAEA,OAAO,IAAMQ,gBAAgB;EAAA,6BAAG,aAAY;IAC1C,IAAMC,EAAE,SAASC,aAAa,EAAE;IAChC,4BAA6BD,EAAE,CAACE,KAAK,EAAE;MAA3BC,MAAM,mBAAVC,EAAE;IACVR,OAAO,CAACC,GAAG,CAACM,MAAM,CAAC;IACnB,kCAAmCH,EAAE,CAACD,gBAAgB,CAACI,MAAM,EAAE;QAAEE,KAAK,EAAE;MAAG,CAAC,CAAC;MAA9DC,SAAS,yBAAhBC,KAAK;IACb,OAAOD,SAAS;EAClB,CAAC;EAAA,gBANYP,gBAAgB;IAAA;EAAA;AAAA,GAM5B;AAED,IAAMS,oBAAoB;EAAA,8BAAG,aAAY;IACzC,IAAI;MACA,IAAMC,WAAW,GAAGC,WAAW,CAACxC,eAAe,EAAE;MACjD,IAAIyC,GAAG,GACP,wCAAwC,GACxC,qBAAqB,GACrB,aAAa,GACb5C,kBAAkB,CAACkB,QAAQ,IAC1BP,MAAM,GAAG,SAAS,GAAGkC,kBAAkB,CAAClC,MAAM,CAAC,GAAG,EAAE,CAAC,GACtD,gBAAgB,GAChBkC,kBAAkB,CAACH,WAAW,CAAC;MAC/Bb,OAAO,CAACC,GAAG,CAACc,GAAG,CAAC;MAChB1C,UAAU,CAACc,wBAAwB,EAAE;MACrC,IAAM8B,OAAM,SAASH,WAAW,CAACI,UAAU,CAAC;QAAGC,OAAO,EAACJ;MAAK,CAAC,CAAC;IAEhE,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZpB,OAAO,CAACqB,KAAK,CAACD,GAAG,CAAC;IACpB;IACA,OAAOH,MAAM,CAAClB,MAAM,CAACD,IAAI;EAC3B,CAAC;EAAA,gBAnBKc,oBAAoB;IAAA;EAAA;AAAA,GAmBzB;AAGD,OAAO,IAAMP,aAAa;EAAA,8BAAG,aAAY;IACvC,IAAMiB,mBAAmB,SAASC,WAAW,CAAC,gBAAgB,CAAC;IAC/D,IAAI,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGH,mBAAmB,EAAE;MAE9C,MAAMI,aAAa,EAAE;IACvB;IACA,IAAMC,WAAW,SAASJ,WAAW,CAAC,aAAa,CAAC;IACpD,IAAInB,EAAE,GAAG,IAAIhC,aAAa,EAAE;IAC5B,MAAMgC,EAAE,CAACwB,cAAc,CAACD,WAAW,CAAC;IACpC,OAAOvB,EAAE;EACX,CAAC;EAAA,gBAVYC,aAAa;IAAA;EAAA;AAAA,GAUzB;;AAGD,IAAMwB,SAAS;EAAA,8BAAG,aAAY;IAC5B,IAAI;MACF,IAAMC,iBAAiB,SAASlB,oBAAoB,EAAE;MACtD,IAAMmB,QAAQ,GAAGtD,IAAI,CAAIN,kBAAkB,CAACkB,QAAQ,SAAIlB,kBAAkB,CAAC6D,YAAY,CAAG;MAC1F,IAAMtC,QAAQ,SAASuC,KAAK,CAAC,wCAAwC,EAAE;QACrEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACPC,aAAa,aAAWL,QAAU;UAClC,cAAc,EAAE;QAClB,CAAC;QACDM,IAAI,0CAAwCP,iBAAiB,sBAC3D3D,kBAAkB,CAACoB;MAEvB,CAAC,CAAC;MACF,IAAM+C,YAAY,SAAS5C,QAAQ,CAAC6C,IAAI,EAAE;MAE1C,IACgBZ,WAAW,GAGvBW,YAAY,CAHdE,YAAY;QACGC,YAAY,GAEzBH,YAAY,CAFdI,aAAa;QACDC,SAAS,GACnBL,YAAY,CADdM,UAAU;MAGZ,IAAMC,eAAc,GAAG,IAAIrB,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGkB,SAAS,GAAG,IAAI;MAC9D,MAAMG,WAAW,CAAC,aAAa,EAAEnB,WAAW,CAAC;MAC7C,MAAMmB,WAAW,CAAC,cAAc,EAAEL,YAAY,CAAC;MAC/C,MAAMK,WAAW,CAAC,gBAAgB,EAAED,eAAc,CAAC;IACrD,CAAC,CAAC,OAAOzB,GAAG,EAAE;MACZpB,OAAO,CAACqB,KAAK,CAACD,GAAG,CAAC;IACpB;EACF,CAAC;EAAA,gBA7BKS,SAAS;IAAA;EAAA;AAAA,GA6Bd;;AAID,OAAO,IAAMH,aAAa;EAAA,8BAAG,aAAY;IACvC,IAAI;MACF,IAAMK,QAAQ,GAAGtD,IAAI,CAAIN,kBAAkB,CAACkB,QAAQ,SAAIlB,kBAAkB,CAAC6D,YAAY,CAAG;MAC1F,IAAMS,YAAY,SAASlB,WAAW,CAAC,cAAc,CAAC;MACtD,IAAM7B,QAAQ,SAASuC,KAAK,CAAC,wCAAwC,EAAE;QACrEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACPC,aAAa,aAAWL,QAAU;UAClC,cAAc,EAAE;QAClB,CAAC;QACDM,IAAI,8CAA4CI;MAClD,CAAC,CAAC;MACF,IAAMH,YAAY,SAAS5C,QAAQ,CAAC6C,IAAI,EAAE;MAC1C,IAAID,YAAY,CAACjB,KAAK,EAAE;QACtB,MAAMQ,SAAS,EAAE;MACnB,CAAC,MAAM;QACL,IACgBkB,cAAc,GAG1BT,YAAY,CAHdE,YAAY;UACGQ,eAAe,GAE5BV,YAAY,CAFdI,aAAa;UACDC,SAAS,GACnBL,YAAY,CADdM,UAAU;QAGZ,IAAMC,gBAAc,GAAG,IAAIrB,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGkB,SAAS,GAAG,IAAI;QAC9D,MAAMG,WAAW,CAAC,aAAa,EAAEC,cAAc,CAAC;QAChD,IAAIC,eAAe,EAAE;UACnB,MAAMF,WAAW,CAAC,cAAc,EAAEE,eAAe,CAAC;QACpD;MAEC;MAAI,MAAMF,WAAW,CAAC,gBAAgB,EAAED,cAAc,CAAC;IAC5D,CAAC,CAAC,OAAOzB,GAAG,EAAE;MACZpB,OAAO,CAACqB,KAAK,CAACD,GAAG,CAAC;IACpB;EACF,CAAC;EAAA,gBAhCYM,aAAa;IAAA;EAAA;AAAA,GAgCzB"},"metadata":{},"sourceType":"module"}