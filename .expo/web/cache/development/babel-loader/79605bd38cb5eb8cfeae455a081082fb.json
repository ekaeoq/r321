{"ast":null,"code":"\n'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport invariant from 'fbjs/lib/invariant';\n\nvar EventSubscriptionVendor = function () {\n  function EventSubscriptionVendor() {\n    _classCallCheck(this, EventSubscriptionVendor);\n    this._subscriptionsForType = {};\n  }\n  _createClass(EventSubscriptionVendor, [{\n    key: \"addSubscription\",\n    value:\n\n    function addSubscription(eventType, subscription) {\n      invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n      if (!this._subscriptionsForType[eventType]) {\n        this._subscriptionsForType[eventType] = [];\n      }\n      var key = this._subscriptionsForType[eventType].length;\n      this._subscriptionsForType[eventType].push(subscription);\n      subscription.eventType = eventType;\n      subscription.key = key;\n      return subscription;\n    }\n  }, {\n    key: \"removeAllSubscriptions\",\n    value:\n\n    function removeAllSubscriptions(eventType) {\n      if (eventType == null) {\n        this._subscriptionsForType = {};\n      } else {\n        delete this._subscriptionsForType[eventType];\n      }\n    }\n  }, {\n    key: \"removeSubscription\",\n    value:\n\n    function removeSubscription(subscription) {\n      var eventType = subscription.eventType;\n      var key = subscription.key;\n      var subscriptionsForType = this._subscriptionsForType[eventType];\n      if (subscriptionsForType) {\n        delete subscriptionsForType[key];\n      }\n    }\n  }, {\n    key: \"getSubscriptionsForType\",\n    value:\n\n    function getSubscriptionsForType(eventType) {\n      return this._subscriptionsForType[eventType];\n    }\n  }]);\n  return EventSubscriptionVendor;\n}();\nexport default EventSubscriptionVendor;","map":{"version":3,"names":["invariant","EventSubscriptionVendor","_subscriptionsForType","eventType","subscription","subscriber","key","length","push","subscriptionsForType"],"sources":["D:/DOKUMENTI/r321/node_modules/react-native-web/dist/vendor/react-native/emitter/_EventSubscriptionVendor.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n */\r\n'use strict';\r\n\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\n/**\r\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\r\n * subscribed to a particular event type.\r\n */\r\nclass EventSubscriptionVendor {\r\n  constructor() {\r\n    this._subscriptionsForType = {};\r\n  }\r\n  /**\r\n   * Adds a subscription keyed by an event type.\r\n   *\r\n   * @param {string} eventType\r\n   * @param {EventSubscription} subscription\r\n   */\r\n\r\n\r\n  addSubscription(eventType, subscription) {\r\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\r\n\r\n    if (!this._subscriptionsForType[eventType]) {\r\n      this._subscriptionsForType[eventType] = [];\r\n    }\r\n\r\n    var key = this._subscriptionsForType[eventType].length;\r\n\r\n    this._subscriptionsForType[eventType].push(subscription);\r\n\r\n    subscription.eventType = eventType;\r\n    subscription.key = key;\r\n    return subscription;\r\n  }\r\n  /**\r\n   * Removes a bulk set of the subscriptions.\r\n   *\r\n   * @param {?string} eventType - Optional name of the event type whose\r\n   *   registered supscriptions to remove, if null remove all subscriptions.\r\n   */\r\n\r\n\r\n  removeAllSubscriptions(eventType) {\r\n    if (eventType == null) {\r\n      this._subscriptionsForType = {};\r\n    } else {\r\n      delete this._subscriptionsForType[eventType];\r\n    }\r\n  }\r\n  /**\r\n   * Removes a specific subscription. Instead of calling this function, call\r\n   * `subscription.remove()` directly.\r\n   *\r\n   * @param {object} subscription\r\n   */\r\n\r\n\r\n  removeSubscription(subscription) {\r\n    var eventType = subscription.eventType;\r\n    var key = subscription.key;\r\n    var subscriptionsForType = this._subscriptionsForType[eventType];\r\n\r\n    if (subscriptionsForType) {\r\n      delete subscriptionsForType[key];\r\n    }\r\n  }\r\n  /**\r\n   * Returns the array of subscriptions that are currently registered for the\r\n   * given event type.\r\n   *\r\n   * Note: This array can be potentially sparse as subscriptions are deleted\r\n   * from it when they are removed.\r\n   *\r\n   * TODO: This returns a nullable array. wat?\r\n   *\r\n   * @param {string} eventType\r\n   * @returns {?array}\r\n   */\r\n\r\n\r\n  getSubscriptionsForType(eventType) {\r\n    return this._subscriptionsForType[eventType];\r\n  }\r\n\r\n}\r\n\r\nexport default EventSubscriptionVendor;"],"mappings":";AASA,YAAY;;AAAC;AAAA;AAEb,OAAOA,SAAS,MAAM,oBAAoB;;AAAC,IAMrCC,uBAAuB;EAC3B,mCAAc;IAAA;IACZ,IAAI,CAACC,qBAAqB,GAAG,CAAC,CAAC;EACjC;EAAC;IAAA;IAAA;;IASD,yBAAgBC,SAAS,EAAEC,YAAY,EAAE;MACvCJ,SAAS,CAACI,YAAY,CAACC,UAAU,KAAK,IAAI,EAAE,wDAAwD,CAAC;MAErG,IAAI,CAAC,IAAI,CAACH,qBAAqB,CAACC,SAAS,CAAC,EAAE;QAC1C,IAAI,CAACD,qBAAqB,CAACC,SAAS,CAAC,GAAG,EAAE;MAC5C;MAEA,IAAIG,GAAG,GAAG,IAAI,CAACJ,qBAAqB,CAACC,SAAS,CAAC,CAACI,MAAM;MAEtD,IAAI,CAACL,qBAAqB,CAACC,SAAS,CAAC,CAACK,IAAI,CAACJ,YAAY,CAAC;MAExDA,YAAY,CAACD,SAAS,GAAGA,SAAS;MAClCC,YAAY,CAACE,GAAG,GAAGA,GAAG;MACtB,OAAOF,YAAY;IACrB;EAAC;IAAA;IAAA;;IASD,gCAAuBD,SAAS,EAAE;MAChC,IAAIA,SAAS,IAAI,IAAI,EAAE;QACrB,IAAI,CAACD,qBAAqB,GAAG,CAAC,CAAC;MACjC,CAAC,MAAM;QACL,OAAO,IAAI,CAACA,qBAAqB,CAACC,SAAS,CAAC;MAC9C;IACF;EAAC;IAAA;IAAA;;IASD,4BAAmBC,YAAY,EAAE;MAC/B,IAAID,SAAS,GAAGC,YAAY,CAACD,SAAS;MACtC,IAAIG,GAAG,GAAGF,YAAY,CAACE,GAAG;MAC1B,IAAIG,oBAAoB,GAAG,IAAI,CAACP,qBAAqB,CAACC,SAAS,CAAC;MAEhE,IAAIM,oBAAoB,EAAE;QACxB,OAAOA,oBAAoB,CAACH,GAAG,CAAC;MAClC;IACF;EAAC;IAAA;IAAA;;IAeD,iCAAwBH,SAAS,EAAE;MACjC,OAAO,IAAI,CAACD,qBAAqB,CAACC,SAAS,CAAC;IAC9C;EAAC;EAAA;AAAA;AAIH,eAAeF,uBAAuB"},"metadata":{},"sourceType":"module"}