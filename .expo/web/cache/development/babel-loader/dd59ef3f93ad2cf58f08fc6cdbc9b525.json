{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as Crypto from 'expo-crypto';\nimport * as Random from 'expo-random';\nimport invariant from 'invariant';\nvar CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nfunction getRandomValues(input) {\n  var output = input;\n  if (input.byteLength !== input.length) input = new Uint8Array(input.buffer);\n  var bytes = Random.getRandomBytes(input.length);\n  for (var i = 0; i < bytes.length; i++) {\n    input[i] = bytes[i];\n  }\n  return output;\n}\nfunction convertBufferToString(buffer) {\n  var state = [];\n  for (var i = 0; i < buffer.byteLength; i += 1) {\n    var index = buffer[i] % CHARSET.length;\n    state.push(CHARSET[index]);\n  }\n  return state.join('');\n}\nfunction convertToUrlSafeString(b64) {\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\nexport function generateRandom(size) {\n  var buffer = new Uint8Array(size);\n  getRandomValues(buffer);\n  return convertBufferToString(buffer);\n}\nexport function deriveChallengeAsync(_x) {\n  return _deriveChallengeAsync.apply(this, arguments);\n}\nfunction _deriveChallengeAsync() {\n  _deriveChallengeAsync = _asyncToGenerator(function* (code) {\n    invariant(code.length > 42 && code.length < 129, 'Invalid code length for PKCE.');\n    var buffer = yield Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, code, {\n      encoding: Crypto.CryptoEncoding.BASE64\n    });\n    return convertToUrlSafeString(buffer);\n  });\n  return _deriveChallengeAsync.apply(this, arguments);\n}\nexport function buildCodeAsync() {\n  return _buildCodeAsync.apply(this, arguments);\n}\nfunction _buildCodeAsync() {\n  _buildCodeAsync = _asyncToGenerator(function* () {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n    var codeVerifier = generateRandom(size);\n    var codeChallenge = yield deriveChallengeAsync(codeVerifier);\n    return {\n      codeVerifier: codeVerifier,\n      codeChallenge: codeChallenge\n    };\n  });\n  return _buildCodeAsync.apply(this, arguments);\n}\nexport function generateHexStringAsync(_x2) {\n  return _generateHexStringAsync.apply(this, arguments);\n}\nfunction _generateHexStringAsync() {\n  _generateHexStringAsync = _asyncToGenerator(function* (size) {\n    var value = generateRandom(size);\n    var buffer = yield Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, value, {\n      encoding: Crypto.CryptoEncoding.HEX\n    });\n    return convertToUrlSafeString(buffer);\n  });\n  return _generateHexStringAsync.apply(this, arguments);\n}","map":{"version":3,"mappings":"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","names":["Crypto","Random","invariant","CHARSET","getRandomValues","input","output","byteLength","length","Uint8Array","buffer","bytes","getRandomBytes","i","convertBufferToString","state","index","push","join","convertToUrlSafeString","b64","replace","generateRandom","size","deriveChallengeAsync","code","digestStringAsync","CryptoDigestAlgorithm","SHA256","encoding","CryptoEncoding","BASE64","buildCodeAsync","codeVerifier","codeChallenge","generateHexStringAsync","value","HEX"],"sourceRoot":"","sources":["../src/PKCE.ts"],"sourcesContent":["import * as Crypto from 'expo-crypto';\nimport * as Random from 'expo-random';\nimport invariant from 'invariant';\n\nconst CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\nfunction getRandomValues(input: Uint8Array): Uint8Array {\n  const output = input;\n  // Get access to the underlying raw bytes\n  if (input.byteLength !== input.length) input = new Uint8Array(input.buffer);\n\n  const bytes = Random.getRandomBytes(input.length);\n\n  for (let i = 0; i < bytes.length; i++) input[i] = bytes[i];\n\n  return output;\n}\n\nfunction convertBufferToString(buffer: Uint8Array): string {\n  const state: string[] = [];\n  for (let i = 0; i < buffer.byteLength; i += 1) {\n    const index = buffer[i] % CHARSET.length;\n    state.push(CHARSET[index]);\n  }\n  return state.join('');\n}\n\nfunction convertToUrlSafeString(b64: string): string {\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nexport function generateRandom(size: number): string {\n  const buffer = new Uint8Array(size);\n  getRandomValues(buffer);\n  return convertBufferToString(buffer);\n}\n\n/**\n * Proof key for Code Exchange by OAuth Public Clients (RFC 7636), Section 4.1\n * [Section 4.1](https://tools.ietf.org/html/rfc7636#section-4.1)\n */\nexport async function deriveChallengeAsync(code: string): Promise<string> {\n  // 43 is the minimum, and 128 is the maximum.\n  invariant(code.length > 42 && code.length < 129, 'Invalid code length for PKCE.');\n\n  const buffer = await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, code, {\n    encoding: Crypto.CryptoEncoding.BASE64,\n  });\n  return convertToUrlSafeString(buffer);\n}\n\nexport async function buildCodeAsync(\n  size: number = 128\n): Promise<{ codeChallenge: string; codeVerifier: string }> {\n  // This method needs to be resolved like all other native methods.\n  const codeVerifier = generateRandom(size);\n  const codeChallenge = await deriveChallengeAsync(codeVerifier);\n\n  return { codeVerifier, codeChallenge };\n}\n\n/**\n * Digest a random string with hex encoding, useful for creating `nonce`s.\n */\nexport async function generateHexStringAsync(size: number): Promise<string> {\n  const value = generateRandom(size);\n  const buffer = await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, value, {\n    encoding: Crypto.CryptoEncoding.HEX,\n  });\n  return convertToUrlSafeString(buffer);\n}\n"]},"metadata":{},"sourceType":"module"}