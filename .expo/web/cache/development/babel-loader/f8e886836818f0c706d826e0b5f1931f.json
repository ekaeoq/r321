{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { UnavailabilityError } from 'expo-modules-core';\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport ExponentWebBrowser from \"./ExpoWebBrowser\";\nimport { WebBrowserResultType, WebBrowserPresentationStyle } from \"./WebBrowser.types\";\nexport { WebBrowserResultType, WebBrowserPresentationStyle };\nvar emptyCustomTabsPackages = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: []\n};\nexport function getCustomTabsSupportingBrowsersAsync() {\n  return _getCustomTabsSupportingBrowsersAsync.apply(this, arguments);\n}\nfunction _getCustomTabsSupportingBrowsersAsync() {\n  _getCustomTabsSupportingBrowsersAsync = _asyncToGenerator(function* () {\n    if (!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n      throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n    }\n    if (Platform.OS !== 'android') {\n      return emptyCustomTabsPackages;\n    } else {\n      return yield ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();\n    }\n  });\n  return _getCustomTabsSupportingBrowsersAsync.apply(this, arguments);\n}\nexport function warmUpAsync(_x) {\n  return _warmUpAsync.apply(this, arguments);\n}\nfunction _warmUpAsync() {\n  _warmUpAsync = _asyncToGenerator(function* (browserPackage) {\n    if (!ExponentWebBrowser.warmUpAsync) {\n      throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n    }\n    if (Platform.OS !== 'android') {\n      return {};\n    } else {\n      return yield ExponentWebBrowser.warmUpAsync(browserPackage);\n    }\n  });\n  return _warmUpAsync.apply(this, arguments);\n}\nexport function mayInitWithUrlAsync(_x2, _x3) {\n  return _mayInitWithUrlAsync.apply(this, arguments);\n}\nfunction _mayInitWithUrlAsync() {\n  _mayInitWithUrlAsync = _asyncToGenerator(function* (url, browserPackage) {\n    if (!ExponentWebBrowser.mayInitWithUrlAsync) {\n      throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n    }\n    if (Platform.OS !== 'android') {\n      return {};\n    } else {\n      return yield ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage);\n    }\n  });\n  return _mayInitWithUrlAsync.apply(this, arguments);\n}\nexport function coolDownAsync(_x4) {\n  return _coolDownAsync.apply(this, arguments);\n}\nfunction _coolDownAsync() {\n  _coolDownAsync = _asyncToGenerator(function* (browserPackage) {\n    if (!ExponentWebBrowser.coolDownAsync) {\n      throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n    }\n    if (Platform.OS !== 'android') {\n      return {};\n    } else {\n      return yield ExponentWebBrowser.coolDownAsync(browserPackage);\n    }\n  });\n  return _coolDownAsync.apply(this, arguments);\n}\nvar browserLocked = false;\nexport function openBrowserAsync(_x5) {\n  return _openBrowserAsync.apply(this, arguments);\n}\nfunction _openBrowserAsync() {\n  _openBrowserAsync = _asyncToGenerator(function* (url) {\n    var browserParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!ExponentWebBrowser.openBrowserAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n    }\n    if (browserLocked) {\n      if (__DEV__) {\n        console.warn('Attempted to call WebBrowser.openBrowserAsync multiple times while already active. Only one WebBrowser controller can be active at any given time.');\n      }\n      return {\n        type: WebBrowserResultType.LOCKED\n      };\n    }\n    browserLocked = true;\n    var result;\n    try {\n      result = yield ExponentWebBrowser.openBrowserAsync(url, _processOptions(browserParams));\n    } finally {\n      browserLocked = false;\n    }\n    return result;\n  });\n  return _openBrowserAsync.apply(this, arguments);\n}\nexport function dismissBrowser() {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n  ExponentWebBrowser.dismissBrowser();\n}\nexport function openAuthSessionAsync(_x6, _x7) {\n  return _openAuthSessionAsync.apply(this, arguments);\n}\nfunction _openAuthSessionAsync() {\n  _openAuthSessionAsync = _asyncToGenerator(function* (url, redirectUrl) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (_authSessionIsNativelySupported()) {\n      if (!ExponentWebBrowser.openAuthSessionAsync) {\n        throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n      }\n      if (['ios', 'web'].includes(Platform.OS)) {\n        return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl, _processOptions(options));\n      }\n      return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n    } else {\n      return _openAuthSessionPolyfillAsync(url, redirectUrl, options);\n    }\n  });\n  return _openAuthSessionAsync.apply(this, arguments);\n}\nexport function dismissAuthSession() {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\nexport function maybeCompleteAuthSession() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (ExponentWebBrowser.maybeCompleteAuthSession) {\n    return ExponentWebBrowser.maybeCompleteAuthSession(options);\n  }\n  return {\n    type: 'failed',\n    message: 'Not supported on this platform'\n  };\n}\nfunction _processOptions(options) {\n  return _objectSpread(_objectSpread({}, options), {}, {\n    controlsColor: processColor(options.controlsColor),\n    toolbarColor: processColor(options.toolbarColor),\n    secondaryToolbarColor: processColor(options.secondaryToolbarColor)\n  });\n}\nfunction _authSessionIsNativelySupported() {\n  if (Platform.OS === 'android') {\n    return false;\n  } else if (Platform.OS === 'web') {\n    return true;\n  }\n  var versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\nvar _redirectSubscription = null;\nvar _onWebBrowserCloseAndroid = null;\nvar _isAppStateAvailable = AppState.currentState !== null;\nfunction _onAppStateChangeAndroid(state) {\n  if (!_isAppStateAvailable) {\n    _isAppStateAvailable = true;\n    return;\n  }\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\nfunction _openBrowserAndWaitAndroidAsync(_x8) {\n  return _openBrowserAndWaitAndroidAsync2.apply(this, arguments);\n}\nfunction _openBrowserAndWaitAndroidAsync2() {\n  _openBrowserAndWaitAndroidAsync2 = _asyncToGenerator(function* (startUrl) {\n    var browserParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var appStateChangedToActive = new Promise(function (resolve) {\n      _onWebBrowserCloseAndroid = resolve;\n    });\n    var stateChangeSubscription = AppState.addEventListener('change', _onAppStateChangeAndroid);\n    var result = {\n      type: WebBrowserResultType.CANCEL\n    };\n    var type = null;\n    try {\n      var _yield$openBrowserAsy = yield openBrowserAsync(startUrl, browserParams);\n      type = _yield$openBrowserAsy.type;\n    } catch (e) {\n      stateChangeSubscription.remove();\n      _onWebBrowserCloseAndroid = null;\n      throw e;\n    }\n    if (type === 'opened') {\n      yield appStateChangedToActive;\n      result = {\n        type: WebBrowserResultType.DISMISS\n      };\n    }\n    stateChangeSubscription.remove();\n    _onWebBrowserCloseAndroid = null;\n    return result;\n  });\n  return _openBrowserAndWaitAndroidAsync2.apply(this, arguments);\n}\nfunction _openAuthSessionPolyfillAsync(_x9, _x10) {\n  return _openAuthSessionPolyfillAsync2.apply(this, arguments);\n}\nfunction _openAuthSessionPolyfillAsync2() {\n  _openAuthSessionPolyfillAsync2 = _asyncToGenerator(function* (startUrl, returnUrl) {\n    var browserParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (_redirectSubscription) {\n      throw new Error(\"The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be\");\n    }\n    if (_onWebBrowserCloseAndroid) {\n      throw new Error(\"WebBrowser is already open, only one can be open at a time\");\n    }\n    try {\n      if (Platform.OS === 'android') {\n        return yield Promise.race([_openBrowserAndWaitAndroidAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]);\n      } else {\n        return yield Promise.race([openBrowserAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]);\n      }\n    } finally {\n      if (ExponentWebBrowser.dismissBrowser) {\n        ExponentWebBrowser.dismissBrowser();\n      }\n      _stopWaitingForRedirect();\n    }\n  });\n  return _openAuthSessionPolyfillAsync2.apply(this, arguments);\n}\nfunction _stopWaitingForRedirect() {\n  if (!_redirectSubscription) {\n    throw new Error(\"The WebBrowser auth session is in an invalid state with no redirect handler when one should be set\");\n  }\n  _redirectSubscription.remove();\n  _redirectSubscription = null;\n}\nfunction _waitForRedirectAsync(returnUrl) {\n  return new Promise(function (resolve) {\n    var redirectHandler = function redirectHandler(event) {\n      if (returnUrl && event.url.startsWith(returnUrl)) {\n        resolve({\n          url: event.url,\n          type: 'success'\n        });\n      }\n    };\n    _redirectSubscription = Linking.addEventListener('url', redirectHandler);\n  });\n}","map":{"version":3,"mappings":"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","names":["UnavailabilityError","ExponentWebBrowser","WebBrowserResultType","WebBrowserPresentationStyle","emptyCustomTabsPackages","defaultBrowserPackage","undefined","preferredBrowserPackage","browserPackages","servicePackages","getCustomTabsSupportingBrowsersAsync","Platform","OS","warmUpAsync","browserPackage","mayInitWithUrlAsync","url","coolDownAsync","browserLocked","openBrowserAsync","browserParams","__DEV__","console","warn","type","LOCKED","result","_processOptions","dismissBrowser","openAuthSessionAsync","redirectUrl","options","_authSessionIsNativelySupported","includes","_openAuthSessionPolyfillAsync","dismissAuthSession","maybeCompleteAuthSession","message","controlsColor","processColor","toolbarColor","secondaryToolbarColor","versionNumber","parseInt","String","Version","_redirectSubscription","_onWebBrowserCloseAndroid","_isAppStateAvailable","AppState","currentState","_onAppStateChangeAndroid","state","_openBrowserAndWaitAndroidAsync","startUrl","appStateChangedToActive","Promise","resolve","stateChangeSubscription","addEventListener","CANCEL","e","remove","DISMISS","returnUrl","Error","race","_waitForRedirectAsync","_stopWaitingForRedirect","redirectHandler","event","startsWith","Linking"],"sourceRoot":"","sources":["../src/WebBrowser.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport {\n  AppState,\n  AppStateStatus,\n  Linking,\n  Platform,\n  EmitterSubscription,\n  processColor,\n} from 'react-native';\n\nimport ExponentWebBrowser from './ExpoWebBrowser';\nimport {\n  RedirectEvent,\n  WebBrowserAuthSessionResult,\n  WebBrowserCompleteAuthSessionOptions,\n  WebBrowserCompleteAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n  WebBrowserPresentationStyle,\n  AuthSessionOpenOptions,\n} from './WebBrowser.types';\n\nexport {\n  WebBrowserAuthSessionResult,\n  WebBrowserCompleteAuthSessionOptions,\n  WebBrowserCompleteAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n  WebBrowserPresentationStyle,\n  AuthSessionOpenOptions,\n};\n\nconst emptyCustomTabsPackages: WebBrowserCustomTabsResults = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: [],\n};\n\n// @needsAudit\n/**\n * Returns a list of applications package names supporting Custom Tabs, Custom Tabs\n * service, user chosen and preferred one. This may not be fully reliable, since it uses\n * `PackageManager.getResolvingActivities` under the hood. (For example, some browsers might not be\n * present in browserPackages list once another browser is set to default.)\n *\n * @return The promise which fulfils with [`WebBrowserCustomTabsResults`](#webbrowsercustomtabsresults) object.\n * @platform android\n */\nexport async function getCustomTabsSupportingBrowsersAsync(): Promise<WebBrowserCustomTabsResults> {\n  if (!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n    throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return emptyCustomTabsPackages;\n  } else {\n    return await ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();\n  }\n}\n\n// @needsAudit\n/**\n * This method calls `warmUp` method on [CustomTabsClient](https://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#warmup(long))\n * for specified package.\n *\n * @param browserPackage Package of browser to be warmed up. If not set, preferred browser will be warmed.\n *\n * @return A promise which fulfils with `WebBrowserWarmUpResult` object.\n * @platform android\n */\nexport async function warmUpAsync(browserPackage?: string): Promise<WebBrowserWarmUpResult> {\n  if (!ExponentWebBrowser.warmUpAsync) {\n    throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.warmUpAsync(browserPackage);\n  }\n}\n\n// @needsAudit\n/**\n * This method initiates (if needed) [CustomTabsSession](https://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html#maylaunchurl)\n * and calls its `mayLaunchUrl` method for browser specified by the package.\n *\n * @param url The url of page that is likely to be loaded first when opening browser.\n * @param browserPackage Package of browser to be informed. If not set, preferred\n * browser will be used.\n *\n * @return A promise which fulfils with `WebBrowserMayInitWithUrlResult` object.\n * @platform android\n */\nexport async function mayInitWithUrlAsync(\n  url: string,\n  browserPackage?: string\n): Promise<WebBrowserMayInitWithUrlResult> {\n  if (!ExponentWebBrowser.mayInitWithUrlAsync) {\n    throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage);\n  }\n}\n\n// @needsAudit\n/**\n * This methods removes all bindings to services created by [`warmUpAsync`](#webbrowserwarmupasyncbrowserpackage)\n * or [`mayInitWithUrlAsync`](#webbrowsermayinitwithurlasyncurl-browserpackage). You should call\n * this method once you don't need them to avoid potential memory leaks. However, those binding\n * would be cleared once your application is destroyed, which might be sufficient in most cases.\n *\n * @param browserPackage Package of browser to be cooled. If not set, preferred browser will be used.\n *\n * @return The promise which fulfils with ` WebBrowserCoolDownResult` when cooling is performed, or\n * an empty object when there was no connection to be dismissed.\n * @platform android\n */\nexport async function coolDownAsync(browserPackage?: string): Promise<WebBrowserCoolDownResult> {\n  if (!ExponentWebBrowser.coolDownAsync) {\n    throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.coolDownAsync(browserPackage);\n  }\n}\n\nlet browserLocked = false;\n\n// @needsAudit\n/**\n * Opens the url with Safari in a modal on iOS using [`SFSafariViewController`](https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller),\n * and Chrome in a new [custom tab](https://developer.chrome.com/multidevice/android/customtabs)\n * on Android. On iOS, the modal Safari will not share cookies with the system Safari. If you need\n * this, use [`openAuthSessionAsync`](#webbrowseropenauthsessionasyncurl-redirecturl-browserparams).\n *\n * @param url The url to open in the web browser.\n * @param browserParams A dictionary of key-value pairs.\n *\n * @return The promise behaves differently based on the platform.\n * On Android promise resolves with `{type: 'opened'}` if we were able to open browser.\n * On iOS:\n * - If the user closed the web browser, the Promise resolves with `{ type: 'cancel' }`.\n * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser), the Promise resolves with `{ type: 'dismiss' }`.\n */\nexport async function openBrowserAsync(\n  url: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  if (!ExponentWebBrowser.openBrowserAsync) {\n    throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n  }\n\n  if (browserLocked) {\n    // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n    // support it this makes the behavior predictable.\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call WebBrowser.openBrowserAsync multiple times while already active. Only one WebBrowser controller can be active at any given time.'\n      );\n    }\n\n    return { type: WebBrowserResultType.LOCKED };\n  }\n  browserLocked = true;\n\n  let result: WebBrowserResult;\n  try {\n    result = await ExponentWebBrowser.openBrowserAsync(url, _processOptions(browserParams));\n  } finally {\n    // WebBrowser session complete, unset lock\n    browserLocked = false;\n  }\n\n  return result;\n}\n\n// @needsAudit\n/**\n * Dismisses the presented web browser.\n *\n * @return The `void` on successful attempt, or throws error, if dismiss functionality is not avaiable.\n * @platform ios\n */\nexport function dismissBrowser(): void {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n  ExponentWebBrowser.dismissBrowser();\n}\n\n// @needsAudit\n/**\n * # On iOS:\n * Opens the url with Safari in a modal using `ASWebAuthenticationSession`. The user will be asked\n * whether to allow the app to authenticate using the given url.\n *\n * # On Android:\n * This will be done using a \"custom Chrome tabs\" browser, [AppState](../react-native/appstate/),\n * and [Linking](./linking/) APIs.\n *\n * # On web:\n * > This API can only be used in a secure environment (`https`). You can use expo `start:web --https`\n * to test this. Otherwise, an error with code [`ERR_WEB_BROWSER_CRYPTO`](#errwebbrowsercrypto) will be thrown.\n * This will use the browser's [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) API.\n * - _Desktop_: This will create a new web popup window in the browser that can be closed later using `WebBrowser.maybeCompleteAuthSession()`.\n * - _Mobile_: This will open a new tab in the browser which can be closed using `WebBrowser.maybeCompleteAuthSession()`.\n *\n * How this works on web:\n * - A crypto state will be created for verifying the redirect.\n *   - This means you need to run with `npx expo start --https`\n * - The state will be added to the window's `localstorage`. This ensures that auth cannot complete\n *   unless it's done from a page running with the same origin as it was started.\n *   Ex: if `openAuthSessionAsync` is invoked on `https://localhost:19006`, then `maybeCompleteAuthSession`\n *   must be invoked on a page hosted from the origin `https://localhost:19006`. Using a different\n *   website, or even a different host like `https://128.0.0.*:19006` for example will not work.\n * - A timer will be started to check for every 1000 milliseconds (1 second) to detect if the window\n *   has been closed by the user. If this happens then a promise will resolve with `{ type: 'dismiss' }`.\n *\n * > On mobile web, Chrome and Safari will block any call to [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n * which takes too long to fire after a user interaction. This method must be invoked immediately\n * after a user interaction. If the event is blocked, an error with code [`ERR_WEB_BROWSER_BLOCKED`](#errwebbrowserblocked) will be thrown.\n *\n * @param url The url to open in the web browser. This should be a login page.\n * @param redirectUrl _Optional_ - The url to deep link back into your app.\n * On web, this defaults to the output of [`Linking.createURL(\"\")`](./linking/#linkingcreateurlpath-namedparameters).\n * @param options _Optional_ - An object extending the [`WebBrowserOpenOptions`](#webbrowseropenoptions).\n * If there is no native AuthSession implementation available (which is the case on Android)\n * these params will be used in the browser polyfill. If there is a native AuthSession implementation,\n * these params will be ignored.\n *\n * @return\n * - If the user does not permit the application to authenticate with the given url, the Promise fulfills with `{ type: 'cancel' }` object.\n * - If the user closed the web browser, the Promise fulfills with `{ type: 'cancel' }` object.\n * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser),\n * the Promise fulfills with `{ type: 'dismiss' }` object.\n */\nexport async function openAuthSessionAsync(\n  url: string,\n  redirectUrl?: string | null,\n  options: AuthSessionOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.openAuthSessionAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n    }\n    if (['ios', 'web'].includes(Platform.OS)) {\n      return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl, _processOptions(options));\n    }\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl, options);\n  }\n}\n\n// @docsMissing\nexport function dismissAuthSession(): void {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\n// @needsAudit\n/**\n * Possibly completes an authentication session on web in a window popup. The method\n * should be invoked on the page that the window redirects to.\n *\n * @param options\n *\n * @return Returns an object with message about why the redirect failed or succeeded:\n *\n * If `type` is set to `failed`, the reason depends on the message:\n * - `Not supported on this platform`: If the platform doesn't support this method (iOS, Android).\n * - `Cannot use expo-web-browser in a non-browser environment`: If the code was executed in an SSR\n *   or node environment.\n * - `No auth session is currently in progress`: (the cached state wasn't found in local storage).\n *   This can happen if the window redirects to an origin (website) that is different to the initial\n *   website origin. If this happens in development, it may be because the auth started on localhost\n *   and finished on your computer port (Ex: `128.0.0.*`). This is controlled by the `redirectUrl`\n *   and `returnUrl`.\n * - `Current URL \"<URL>\" and original redirect URL \"<URL>\" do not match`: This can occur when the\n *   redirect URL doesn't match what was initial defined as the `returnUrl`. You can skip this test\n *   in development by passing `{ skipRedirectCheck: true }` to the function.\n *\n * If `type` is set to `success`, the parent window will attempt to close the child window immediately.\n *\n * If the error `ERR_WEB_BROWSER_REDIRECT` was thrown, it may mean that the parent window was\n * reloaded before the auth was completed. In this case you'll need to close the child window manually.\n *\n * @platform web\n */\nexport function maybeCompleteAuthSession(\n  options: WebBrowserCompleteAuthSessionOptions = {}\n): WebBrowserCompleteAuthSessionResult {\n  if (ExponentWebBrowser.maybeCompleteAuthSession) {\n    return ExponentWebBrowser.maybeCompleteAuthSession(options);\n  }\n  return { type: 'failed', message: 'Not supported on this platform' };\n}\n\nfunction _processOptions(options: WebBrowserOpenOptions) {\n  return {\n    ...options,\n    controlsColor: processColor(options.controlsColor),\n    toolbarColor: processColor(options.toolbarColor),\n    secondaryToolbarColor: processColor(options.secondaryToolbarColor),\n  };\n}\n\n/* iOS <= 10 and Android polyfill for SFAuthenticationSession flow */\n\nfunction _authSessionIsNativelySupported(): boolean {\n  if (Platform.OS === 'android') {\n    return false;\n  } else if (Platform.OS === 'web') {\n    return true;\n  }\n\n  const versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nlet _redirectSubscription: EmitterSubscription | null = null;\n\n/*\n * openBrowserAsync on Android doesn't wait until closed, so we need to polyfill\n * it with AppState\n */\n\n// Store the `resolve` function from a Promise to fire when the AppState\n// returns to active\nlet _onWebBrowserCloseAndroid: null | (() => void) = null;\n\n// If the initial AppState.currentState is null, we assume that the first call to\n// AppState#change event is not actually triggered by a real change,\n// is triggered instead by the bridge capturing the current state\n// (https://reactnative.dev/docs/appstate#basic-usage)\nlet _isAppStateAvailable: boolean = AppState.currentState !== null;\nfunction _onAppStateChangeAndroid(state: AppStateStatus) {\n  if (!_isAppStateAvailable) {\n    _isAppStateAvailable = true;\n    return;\n  }\n\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\n\nasync function _openBrowserAndWaitAndroidAsync(\n  startUrl: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  const appStateChangedToActive = new Promise<void>((resolve) => {\n    _onWebBrowserCloseAndroid = resolve;\n  });\n  const stateChangeSubscription = AppState.addEventListener('change', _onAppStateChangeAndroid);\n\n  let result: WebBrowserResult = { type: WebBrowserResultType.CANCEL };\n  let type: string | null = null;\n\n  try {\n    ({ type } = await openBrowserAsync(startUrl, browserParams));\n  } catch (e) {\n    stateChangeSubscription.remove();\n    _onWebBrowserCloseAndroid = null;\n    throw e;\n  }\n\n  if (type === 'opened') {\n    await appStateChangedToActive;\n    result = { type: WebBrowserResultType.DISMISS };\n  }\n\n  stateChangeSubscription.remove();\n  _onWebBrowserCloseAndroid = null;\n  return result;\n}\n\nasync function _openAuthSessionPolyfillAsync(\n  startUrl: string,\n  returnUrl: string | null | undefined,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_redirectSubscription) {\n    throw new Error(\n      `The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`\n    );\n  }\n\n  if (_onWebBrowserCloseAndroid) {\n    throw new Error(`WebBrowser is already open, only one can be open at a time`);\n  }\n\n  try {\n    if (Platform.OS === 'android') {\n      return await Promise.race([\n        _openBrowserAndWaitAndroidAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    } else {\n      return await Promise.race([\n        openBrowserAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    }\n  } finally {\n    // We can't dismiss the browser on Android, only call this when it's available.\n    // Users on Android need to manually press the 'x' button in Chrome Custom Tabs, sadly.\n    if (ExponentWebBrowser.dismissBrowser) {\n      ExponentWebBrowser.dismissBrowser();\n    }\n\n    _stopWaitingForRedirect();\n  }\n}\n\nfunction _stopWaitingForRedirect() {\n  if (!_redirectSubscription) {\n    throw new Error(\n      `The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`\n    );\n  }\n\n  _redirectSubscription.remove();\n  _redirectSubscription = null;\n}\n\nfunction _waitForRedirectAsync(\n  returnUrl: string | null | undefined\n): Promise<WebBrowserRedirectResult> {\n  // Note that this Promise never resolves when `returnUrl` is nullish\n  return new Promise((resolve) => {\n    const redirectHandler = (event: RedirectEvent) => {\n      if (returnUrl && event.url.startsWith(returnUrl)) {\n        resolve({ url: event.url, type: 'success' });\n      }\n    };\n\n    _redirectSubscription = Linking.addEventListener('url', redirectHandler);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}